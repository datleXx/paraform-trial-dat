// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Job {
    id            String        @id @default(cuid())
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
    title         String
    company       String?
    location      String
    description   String
    skills        String[]
    questions     Question[]
    remote_job_id String        @unique
    Application   Application[]
}

model Question {
    id                        String                      @id @default(cuid())
    created_at                DateTime                    @default(now())
    updated_at                DateTime                    @updatedAt
    required                  Boolean?                    @default(false)
    private                   Boolean?                    @default(false)
    label                     String
    name                      String
    type                      String                      @default("short_text")
    values                    String[]
    description               String?
    job_id                    String
    job                       Job                         @relation(fields: [job_id], references: [remote_job_id], onDelete: Cascade)
    ApplicationQuestionAnswer ApplicationQuestionAnswer[]
}

model Application {
    id         String   @id @default(cuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    job_id     String
    job        Job      @relation(fields: [job_id], references: [remote_job_id], onDelete: Cascade)

    CandidateToApplication    CandidateToApplication[]
    ApplicationQuestionAnswer ApplicationQuestionAnswer[]
    Attachment                Attachment[]
}

model CandidateToApplication {
    id             String      @id @default(cuid())
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    candidate_id   String
    application_id String
    candidate      Candidate   @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
    application    Application @relation(fields: [application_id], references: [id], onDelete: Cascade)
}

model Candidate {
    id         String   @id @default(cuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    first_name             String
    last_name              String
    email                  String
    phone                  String
    address                String?
    social_media_address   String?
    company                String                   @default("Lyra Technology")
    title                  String
    is_private             Boolean                  @default(false)
    CandidateToApplication CandidateToApplication[]
}

model ApplicationQuestionAnswer {
    id             String      @id @default(cuid())
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    question_id    String
    question       Question    @relation(fields: [question_id], references: [id], onDelete: Cascade)
    application_id String
    application    Application @relation(fields: [application_id], references: [id], onDelete: Cascade)
    answer         String
}

model Attachment {
    id             String      @id @default(cuid())
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    type           String
    filename       String
    url            String
    content        String?
    content_type   String?
    application_id String
    application    Application @relation(fields: [application_id], references: [id], onDelete: Cascade)
}
